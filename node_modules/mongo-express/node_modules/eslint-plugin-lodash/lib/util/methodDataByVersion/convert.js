'use strict';
// aliases wrapper wrapperAliases shorthand chainable iteratee iterateeIndex args

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _ = require('lodash');
var data = require('./4');
var fs = require('fs');
var path = require('path');
var methodNames = _([].concat(_toConsumableArray(_.values(data.aliases)), _toConsumableArray(data.wrapper), _toConsumableArray(data.shorthand), _toConsumableArray(data.chainable), _toConsumableArray(data.iteratee.any), _toConsumableArray(_.keys(data.iteratee.differentIndex)), _toConsumableArray(_.keys(data.args)))).uniq().sortBy().value();
var methodRecords = _.map(methodNames, function (method) {
    var res = {
        aliases: _(data.aliases).pickBy(function (val) {
            return val === method;
        }).keys().value(),
        wrapper: _.includes(data.wrapper, method),
        shorthand: _.includes(data.shorthand, method),
        chainable: _.includes(data.chainable, method),
        iteratee: _.includes(data.iteratee.any, method)
    };
    if (_.has(data.iteratee.differentIndex, method)) {
        _.set(res, 'iterateeIndex', data.iteratee.differentIndex[method]);
    }
    if (_.has(data.args, method)) {
        _.set(res, 'args', data.args[method]);
    }
    return res;
});
var result = _.zipObject(methodNames, methodRecords);
fs.writeFileSync(path.resolve(__dirname, '4.js'), '\'use strict\'\nmodule.exports = ' + JSON.stringify(result, null, 2));